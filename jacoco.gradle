apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.3"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

def fileFilter = ['**/R.class',
                  '**/R$*.class',
                  '**/BuildConfig.*',
                  '**/Manifest*.*',
                  'test/**/*.*',
                  '**/*Test*.*',
                  'android/**/*.*',
                  'androidTest/**/*.*',
                  '**/*$ViewInjector*.*',
                  '**/*$ViewBinder*.*',
                  '**/*$Lambda$*.*', // Jacoco can not handle several "$" in class name.
                  '**/*Module.*', // Modules for Dagger.
                  '**/*Dagger*.*', // Dagger auto-generated code.
                  '**/*MembersInjector*.*', // Dagger auto-generated code.
                  '**/*_Provide*Factory*.*',
                  '**/*_Factory.*', //Dagger auto-generated code
                  '**/*$*$*.*', // Anonymous classes generated by kotlin
                  '**/injector/**/*.*',
                  '**/model/**/*.*',
                  '**/mock/**/*.*',
                  '**/event/**/*.*',
                  '**/**_ViewBinding**',
                  '**/*EventType.*',
                  '**/**Mocked']
def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)
def mainJavaSrc = "${project.projectDir}/src/main/java"
def mainKotlinSrc = "$project.projectDir/src/main/kotlin"

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {

    reports {
        xml.enabled false
        csv.enabled true
        html.enabled = true
        html.destination file("${buildDir}/jacocoHtml")
    }

    sourceDirectories = files([mainJavaSrc, mainKotlinSrc])
    classDirectories = files([debugTree], [kotlinDebugTree])
    executionData = fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ])
    doLast {
        println "Jacoco-Report is at file://${buildDir}/jacocoHtml/index.html"
    }
}

task jacocoTestCoverageVerification(type: JacocoCoverageVerification, dependsOn: 'jacocoTestReport') {
    sourceDirectories = files([mainJavaSrc, mainKotlinSrc])
    classDirectories = files([debugTree], [kotlinDebugTree])
    executionData = fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ])

    violationRules {
        failOnViolation = true

        rule {
            limit {
                minimum = 0.8
            }
        }

        rule {
            enabled = false
            element = 'CLASS'

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.3
            }
        }
    }
}